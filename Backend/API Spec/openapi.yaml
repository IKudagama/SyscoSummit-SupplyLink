openapi: 3.0.3
info:
  title: Online Shopping Store API
  description: API documentation for the online shopping store
  
  version: 1.0.0

tags:
  - name: auth
    description: Operations related to authentication
  - name: user
    description: Operations related to users
  - name: category
    description: Operations related to categories
  - name: product
    description: Operations related to food products
  - name: cart
    description: Operations related to carts
  - name: order
    description: Operations related to orders

paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: User login
      description: Logs in a user and returns a JWT token.
      operationId: loginUser
      requestBody:
        description: Login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Invalid username/password supplied

  /auth/register:
    post:
      tags:
        - auth
      summary: User registration
      description: Registers a new user.
      operationId: registerUser
      requestBody:
        description: User registration data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
        '400':
          description: Invalid input

  /auth/logout:
    post:
      tags:
        - auth
      summary: User logout
      description: Logs out the current user.
      operationId: logoutUser
      responses:
        '200':
          description: Successful operation



  /users/{userId}:
    get:
      tags:
        - user
      summary: Get user by ID
      description: Returns a user by ID.
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      tags:
        - user
      summary: Update user
      description: Updates an existing user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
        '400':
          description: Invalid input
        '404':
          description: User not found

    delete:
      tags:
        - user
      summary: Delete user
      description: Deletes a user by ID.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found

  /categories:
    get:
      tags:
        - category
      summary: List categories
      description: Returns a list of categories.
      operationId: listCategories
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

    post:
      tags:
        - category
      summary: Create category
      description: Creates a new category.
      operationId: createCategory
      requestBody:
        description: Category object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category created
        '400':
          description: Invalid input

  /categories/{categoryId}:
    get:
      tags:
        - category
      summary: Get category by ID
      description: Returns a category by ID.
      operationId: getCategoryById
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found

    put:
      tags:
        - category
      summary: Update category
      description: Updates an existing category.
      operationId: updateCategory
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Category object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Category updated
        '400':
          description: Invalid input
        '404':
          description: Category not found

    delete:
      tags:
        - category
      summary: Delete category
      description: Deletes a category by ID.
      operationId: deleteCategory
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Category deleted
        '404':
          description: Category not found

  /products:
    get:
      tags:
        - product
      summary: List products
      description: Returns a list of food products.
      operationId: listProducts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

    post:
      tags:
        - product
      summary: Create product
      description: Creates a new food product.
      operationId: createProduct
      requestBody:
        description: Product object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created
        '400':
          description: Invalid input

  /products/{productId}:
    get:
      tags:
        - product
      summary: Get product by ID
      description: Returns a food product by ID.
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

    put:
      tags:
        - product
      summary: Update product
      description: Updates an existing food product.
      operationId: updateProduct
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Product object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated
        '400':
          description: Invalid input
        '404':
          description: Product not found

    delete:
      tags:
        - product
      summary: Delete product
      description: Deletes a food product by ID.
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Product deleted
        '404':
          description: Product not found

  /carts:
    get:
      tags:
        - cart
      summary: Get user cart
      description: Returns the current user's cart.
      operationId: getCart
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

    post:
      tags:
        - cart
      summary: Add item to cart
      description: Adds an item to the current user's cart.
      operationId: addItemToCart
      requestBody:
        description: Cart item object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        '201':
          description: Item added to cart
        '400':
          description: Invalid input

  /carts/{itemId}:
    delete:
      tags:
        - cart
      summary: Remove item from cart
      description: Removes an item from the current user's cart.
      operationId: removeItemFromCart
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Item removed from cart
        '404':
          description: Item not found

  /orders:
    get:
      tags:
        - order
      summary: List orders
      description: Returns a list of orders for the current user.
      operationId: listOrders
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

    post:
      tags:
        - order
      summary: Create order
      description: Creates a new order from the current user's cart.
      operationId: createOrder
      requestBody:
        description: Order creation data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: integer
                        format: int64
                      quantity:
                        type: integer
                paymentMethod:
                  type: string
                deliveryAddress:
                  type: string
              required:
                - items
                - paymentMethod
                - deliveryAddress
      responses:
        '201':
          description: Order created
        '400':
          description: Invalid input

  /orders/{orderId}:
    get:
      tags:
        - order
      summary: Get order by ID
      description: Returns an order by ID.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

components:
  schemas:
    User:
      type: object
      properties:
        # id:
        #   type: integer
        #   format: int64
        username:
          type: string
        email:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        address:
          type: string
      required:
        - username
        - email
        - password

    Category:
      type: object
      properties:
        # id:
        #   type: integer
        #   format: int64
        name:
          type: string
        description:
          type: string
      required:
        - name

    Product:
      type: object
      properties:
        # id:
        #   type: integer
        #   format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        categoryId:
          type: integer
          format: int64
      required:
        - name
        - price
        - categoryId

    Cart:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        totalPrice:
          type: number
          format: float

    CartItem:
      type: object
      properties:
        productId:
          type: integer
          format: int64
        quantity:
          type: integer
      required:
        - productId
        - quantity

    Order:
      type: object
      properties:
        # id:
        #   type: integer
        #   format: int64
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        totalPrice:
          type: number
          format: float
        status:
          type: string
          enum:
            - pending
            - completed
            - cancelled
      required:
        - items
        - totalPrice

    OrderItem:
      type: object
      properties:
        productId:
          type: integer
          format: int64
        quantity:
          type: integer
        price:
          type: number
          format: float
      required:
        - productId
        - quantity
        - price
